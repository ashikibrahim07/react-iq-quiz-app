{
  "questions": [
    {
      "question": "Which is the most popular JavaScript framework?",
      "options": ["Angular", "React", "Svelte", "Vue"],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "Which company invented React?",
      "options": ["Google", "Apple", "Netflix", "Facebook"],
      "correctOption": 3,
      "points": 10
    },
    {
      "question": "What's the fundamental building block of React apps?",
      "options": ["Components", "Blocks", "Elements", "Effects"],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "What's the name of the syntax we use to describe the UI in React components?",
      "options": ["FBJ", "Babel", "JSX", "ES2015"],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "How does data flow naturally in React apps?",
      "options": [
        "From parents to children",
        "From children to parents",
        "Both ways",
        "The developers decide"
      ],
      "correctOption": 0,
      "points": 10
    },
    {
      "question": "How to pass data into a child component?",
      "options": ["State", "Props", "PropTypes", "Parameters"],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "When to use derived state?",
      "options": [
        "Whenever the state should not trigger a re-render",
        "Whenever the state can be synchronized with an effect",
        "Whenever the state should be accessible to all components",
        "Whenever the state can be computed from another state variable"
      ],
      "correctOption": 3,
      "points": 30
    },
    {
      "question": "What triggers a UI re-render in React?",
      "options": [
        "Running an effect",
        "Passing props",
        "Updating state",
        "Adding event listeners to DOM elements"
      ],
      "correctOption": 2,
      "points": 20
    },
    {
      "question": "When do we directly 'touch' the DOM in React?",
      "options": [
        "When we need to listen to an event",
        "When we need to change the UI",
        "When we need to add styles",
        "Almost never"
      ],
      "correctOption": 3,
      "points": 20
    },
    {
      "question": "In what situation do we use a callback to update state?",
      "options": [
        "When updating the state will be slow",
        "When the updated state is very data-intensive",
        "When the state update should happen faster",
        "When the new state depends on the previous state"
      ],
      "correctOption": 3,
      "points": 30
    },
    {
      "question": "If we pass a function to useState, when will that function be called?",
      "options": [
        "On each re-render",
        "Each time we update the state",
        "Only on the initial render",
        "The first time we update the state"
      ],
      "correctOption": 2,
      "points": 30
    },
    {
      "question": "Which hook to use for an API request on the component's initial render?",
      "options": ["useState", "useEffect", "useRef", "useReducer"],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "Which variables should go into the useEffect dependency array?",
      "options": [
        "Usually none",
        "All our state variables",
        "All state and props referenced in the effect",
        "All variables needed for clean up"
      ],
      "correctOption": 2,
      "points": 30
    },
    {
      "question": "An effect will always run on the initial render.",
      "options": [
        "True",
        "It depends on the dependency array",
        "False",
        "It depends on the code in the effect"
      ],
      "correctOption": 0,
      "points": 30
    },
    {
      "question": "When will an effect run if it doesn't have a dependency array?",
      "options": [
        "Only when the component mounts",
        "Only when the component unmounts",
        "The first time the component re-renders",
        "Each time the component is re-rendered"
      ],
      "correctOption": 3,
      "points": 20
    },
    {
      "question": "What is the primary purpose of React's virtual DOM?",
      "options": [
        "To directly manipulate the actual DOM",
        "To improve performance by minimizing direct DOM updates",
        "To allow more complex UI rendering",
        "To support multiple frameworks at once"
      ],
      "correctOption": 1,
      "points": 20
    },
    {
      "question": "What does React use to manage component state?",
      "options": ["Redux", "useState", "React Context", "useEffect"],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "Which hook should be used to avoid re-creating a function on every render?",
      "options": ["useMemo", "useEffect", "useCallback", "useState"],
      "correctOption": 2,
      "points": 20
    },
    {
      "question": "What is the primary benefit of using React.memo?",
      "options": [
        "To memoize component state",
        "To prevent unnecessary re-renders of functional components",
        "To improve initial render performance",
        "To make hooks more efficient"
      ],
      "correctOption": 1,
      "points": 20
    },
    {
      "question": "What does the useRef hook return?",
      "options": [
        "A reactive state value",
        "An object with a current property",
        "A new state variable",
        "The function reference itself"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "What kind of data should be stored in React state?",
      "options": [
        "Static data that doesn't change",
        "Dynamic data that can change over time",
        "Global data shared across applications",
        "Data that is stored in cookies"
      ],
      "correctOption": 1,
      "points": 10
    },
    {
      "question": "What is the purpose of a higher-order component (HOC)?",
      "options": [
        "To create a component that renders only UI",
        "To pass down props from the root component",
        "To modify or enhance the functionality of other components",
        "To render conditional content"
      ],
      "correctOption": 2,
      "points": 20
    },
    {
      "question": "Which of these is NOT a React lifecycle method?",
      "options": [
        "componentDidMount",
        "componentDidUpdate",
        "useRender",
        "componentWillUnmount"
      ],
      "correctOption": 2,
      "points": 10
    },
    {
      "question": "What is the purpose of useReducer?",
      "options": [
        "To manage global state",
        "To simplify state updates that depend on previous state",
        "To make state updates asynchronous",
        "To provide context across components"
      ],
      "correctOption": 1,
      "points": 20
    },
    {
      "question": "Which hook is used to set up a subscription in a component?",
      "options": ["useRef", "useEffect", "useCallback", "useLayoutEffect"],
      "correctOption": 1,
      "points": 15
    },
    {
      "question": "What feature of React helps in passing data through many layers of components?",
      "options": ["useContext", "useState", "useEffect", "React.memo"],
      "correctOption": 0,
      "points": 15
    },
    {
      "question": "How can you make a component rerender only when certain state or props change?",
      "options": [
        "By wrapping it with React.memo",
        "By using useEffect with dependencies",
        "By using componentDidUpdate",
        "By passing only props"
      ],
      "correctOption": 0,
      "points": 20
    },
    {
      "question": "Which React feature allows you to share logic among components?",
      "options": ["useReducer", "HOCs", "Custom hooks", "useState"],
      "correctOption": 2,
      "points": 20
    }
  ]
}
